// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ClashRoyale.API
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    public partial interface ICRClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Search clans
        /// </summary>
        /// <remarks>
        /// Search all clans by name and/or filtering the results using various
        /// criteria. At least one filtering
        /// criteria must be defined and if name is used as part of search, it
        /// is required to be at least three
        /// characters long.
        ///
        /// It is not possible to specify ordering for results so clients
        /// should not rely on any specific ordering
        /// as that may change in the future releases of the API.
        ///
        /// </remarks>
        /// <param name='name'>
        /// Search clans by name. If name is used as part of search query, it
        /// needs to be at least three
        /// characters long. Name search parameter is interpreted as wild card
        /// search, so it may appear
        /// anywhere in the clan name.
        /// </param>
        /// <param name='locationId'>
        /// Filter by clan location identifier. For list of available
        /// locations, refer to getLocations operation.
        /// </param>
        /// <param name='minMembers'>
        /// Filter by minimum amount of clan members.
        /// </param>
        /// <param name='maxMembers'>
        /// Filter by maximum amount of clan members.
        /// </param>
        /// <param name='minScore'>
        /// Filter by minimum amount of clan score.
        /// </param>
        /// <param name='limit'>
        /// Limit the number of items returned in the response.
        /// </param>
        /// <param name='after'>
        /// Return only items that occur after this marker. After marker can be
        /// found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='before'>
        /// Return only items that occur before this marker. Before marker can
        /// be found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ClanSearchResult>> SearchClansWithHttpMessagesAsync(string name = default(string), int? locationId = default(int?), int? minMembers = default(int?), int? maxMembers = default(int?), int? minScore = default(int?), int? limit = default(int?), int? after = default(int?), int? before = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get clan information
        /// </summary>
        /// <remarks>
        /// Get information about a single clan by clan tag. Clan tags can be
        /// found using clan search operation.
        ///
        /// Note that clan tags start with hash character '#' and that needs to
        /// be URL-encoded properly to work
        /// in URL, so for example clan tag '#2ABC' would become '%232ABC' in
        /// the URL.
        ///
        /// </remarks>
        /// <param name='clanTag'>
        /// Tag of the clan to retrieve.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Clan>> GetClanWithHttpMessagesAsync(string clanTag, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List clan members
        /// </summary>
        /// <remarks>
        /// List clan members
        /// </remarks>
        /// <param name='clanTag'>
        /// Tag of the clan whose members to retrieve.
        /// </param>
        /// <param name='limit'>
        /// Limit the number of items returned in the response.
        /// </param>
        /// <param name='after'>
        /// Return only items that occur after this marker. After marker can be
        /// found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='before'>
        /// Return only items that occur before this marker. Before marker can
        /// be found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ClanMemberList>> GetClanMembersWithHttpMessagesAsync(string clanTag, int? limit = default(int?), int? after = default(int?), int? before = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve clan's clan war log
        /// </summary>
        /// <remarks>
        /// Retrieve clan's clan war log
        /// </remarks>
        /// <param name='clanTag'>
        /// Tag of the clan whose war log to retrieve.
        /// </param>
        /// <param name='limit'>
        /// Limit the number of items returned in the response.
        /// </param>
        /// <param name='after'>
        /// Return only items that occur after this marker. After marker can be
        /// found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='before'>
        /// Return only items that occur before this marker. Before marker can
        /// be found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<WarLog>> GetClanWarLogWithHttpMessagesAsync(string clanTag, int? limit = default(int?), int? after = default(int?), int? before = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve information about clan's current clan war
        /// </summary>
        /// <remarks>
        /// Retrieve information about clan's current clan war
        /// </remarks>
        /// <param name='clanTag'>
        /// Tag of the clan whose war log to retrieve.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CurrentWar>> GetCurrentWarWithHttpMessagesAsync(string clanTag, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get player information
        /// </summary>
        /// <remarks>
        /// Get information about a single player by player tag. Player tags
        /// can be found either in game or by from
        /// clan member lists.
        ///
        /// Note that player tags start with hash character '#' and that needs
        /// to be URL-encoded properly to work
        /// in URL, so for example player tag '#2ABC' would become '%232ABC' in
        /// the URL.
        ///
        /// </remarks>
        /// <param name='playerTag'>
        /// Tag of the player to retrieve.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PlayerDetail>> GetPlayerWithHttpMessagesAsync(string playerTag, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get information about player's upcoming chests
        /// </summary>
        /// <remarks>
        /// Get list of reward chests that the player will receive next in the
        /// game.
        ///
        /// </remarks>
        /// <param name='playerTag'>
        /// Tag of the player whose information to retrieve.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpcomingChestsList>> GetPlayerUpcomingChestsWithHttpMessagesAsync(string playerTag, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get log of recent battles for a player
        /// </summary>
        /// <remarks>
        /// Get list of recent battle results for a player.
        ///
        /// </remarks>
        /// <param name='playerTag'>
        /// Tag of the player whose information to retrieve.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<BattleLogItem>>> GetPlayerBattlesWithHttpMessagesAsync(string playerTag, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Search tournaments
        /// </summary>
        /// <remarks>
        /// Search all tournaments by name.
        ///
        /// It is not possible to specify ordering for results so clients
        /// should not rely on any specific ordering
        /// as that may change in the future releases of the API.
        ///
        /// </remarks>
        /// <param name='name'>
        /// Search tournaments by name.
        /// </param>
        /// <param name='limit'>
        /// Limit the number of items returned in the response.
        /// </param>
        /// <param name='after'>
        /// Return only items that occur after this marker. After marker can be
        /// found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='before'>
        /// Return only items that occur before this marker. Before marker can
        /// be found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TournamentSearchResult>> SearchTournamentsWithHttpMessagesAsync(string name = default(string), int? limit = default(int?), int? after = default(int?), int? before = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get tournament information
        /// </summary>
        /// <remarks>
        /// Get information about a single tournament by a tournament tag.
        ///
        /// </remarks>
        /// <param name='tournamentTag'>
        /// Tag of the tournament to retrieve.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Tournament>> GetTournamentWithHttpMessagesAsync(string tournamentTag, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get list of available cards
        /// </summary>
        /// <remarks>
        /// Get list of all available cards.
        ///
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CardList>> GetCardsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List locations
        /// </summary>
        /// <remarks>
        /// List all available locations
        /// </remarks>
        /// <param name='limit'>
        /// Limit the number of items returned in the response.
        /// </param>
        /// <param name='after'>
        /// Return only items that occur after this marker. After marker can be
        /// found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='before'>
        /// Return only items that occur before this marker. Before marker can
        /// be found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LocationList>> GetLocationsWithHttpMessagesAsync(int? limit = default(int?), int? after = default(int?), int? before = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get location information
        /// </summary>
        /// <remarks>
        /// Get information about specific location
        /// </remarks>
        /// <param name='locationId'>
        /// Identifier of the location to retrieve.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Location>> GetLocationWithHttpMessagesAsync(string locationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get clan rankings for a specific location
        /// </summary>
        /// <remarks>
        /// Get clan rankings for a specific location
        /// </remarks>
        /// <param name='locationId'>
        /// Identifier of the location to retrieve.
        /// </param>
        /// <param name='limit'>
        /// Limit the number of items returned in the response.
        /// </param>
        /// <param name='after'>
        /// Return only items that occur after this marker. After marker can be
        /// found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='before'>
        /// Return only items that occur before this marker. Before marker can
        /// be found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ClanRankingList>> GetClanRankingWithHttpMessagesAsync(string locationId, int? limit = default(int?), int? after = default(int?), int? before = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get player rankings for a specific location
        /// </summary>
        /// <remarks>
        /// Get player rankings for a specific location
        /// </remarks>
        /// <param name='locationId'>
        /// Identifier of the location to retrieve.
        /// </param>
        /// <param name='limit'>
        /// Limit the number of items returned in the response.
        /// </param>
        /// <param name='after'>
        /// Return only items that occur after this marker. After marker can be
        /// found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='before'>
        /// Return only items that occur before this marker. Before marker can
        /// be found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PlayerRankingList>> GetPlayerRankingWithHttpMessagesAsync(string locationId, int? limit = default(int?), int? after = default(int?), int? before = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get clan war rankings for a specific location
        /// </summary>
        /// <remarks>
        /// Get clan war rankings for a specific location
        /// </remarks>
        /// <param name='locationId'>
        /// Identifier of the location to retrieve.
        /// </param>
        /// <param name='limit'>
        /// Limit the number of items returned in the response.
        /// </param>
        /// <param name='after'>
        /// Return only items that occur after this marker. After marker can be
        /// found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='before'>
        /// Return only items that occur before this marker. Before marker can
        /// be found from the
        /// response, inside the 'paging' property. Note that only after or
        /// before can be specified for a
        /// request, not both.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ClanWarsRankingList>> GetClanWarsRankingWithHttpMessagesAsync(string locationId, int? limit = default(int?), int? after = default(int?), int? before = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
